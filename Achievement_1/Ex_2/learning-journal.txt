Reflection Questions

1. Imagine you’re having a conversation with a future colleague about whether to use the iPython Shell instead of Python’s default shell. What reasons would you give to explain the benefits of using the iPython Shell over the default one?
The iPython shell helps the user to understand what is happening by displaying different colored fonts for certain code elements like strings, input vs output, integers and error messages. It also automatically adds code indentation, which makes the code easier to read and follow.

2. Python has a host of different data types that allow you to store and organize information. List 4 examples of data types that Python recognizes, briefly define them, and indicate whether they are scalar or non-scalar.
    Data type | Definition | Scalar or Non-Scalar?

	List | Ordered sequence of objects surrounded by square brackets | Non-Scalar

	Dictionary | Dict can store values & objects within itself using key:value pairs | Non-Scalar

	Integer | Any whole number, positive or negative | Scalar

	String | An array of characters surrounded by single or double quotes | Non-Scalar

3. A frequent question at job interviews for Python developers is: what is the difference between lists and tuples in Python? Write down how you would respond.
The difference between tuples and lists in Python is that lists are far easier to modify by the user. With tuples, if the user wanted to add an element to the end of the sequence, they would have to create a new tuple for the new element and then concatenate the two tuples together. With a list, the user could simply use either the `.append()` or `.extend()` method. Users also have more freedom to modify, add and delete elements in lists at any desired position.

4. In the task for this Exercise, you decided what you thought was the most suitable data structure for storing all the information for a recipe. Now, imagine you’re creating a language-learning app that helps users memorize vocabulary through flashcards. Users can input vocabulary words, definitions, and their category (noun, verb, etc.) into the flashcards. They can then quiz themselves by flipping through the flashcards. Think about the necessary data types and what would be the most suitable data structure for this language-learning app. Between tuples, lists, and dictionaries, which would you choose? Think about their respective advantages and limitations, and where flexibility might be useful if you were to continue developing the language-learning app beyond vocabulary memorization. 
For this app I would use a list to contain all of the flashcards rather than a tuple, so that users have more ability to modify the flashcards if/when desired. I would choose a list over a tuple as, if developing the app further in the future, I may want to add a function where users can add more identifying features to the flashcards for better organization, or where users can move specific elements from one list to another if desired. I would use dictionaries for each flashcard as this allows the user to input and label all desired data in a clear and readable format, with easy access to modifications when needed.